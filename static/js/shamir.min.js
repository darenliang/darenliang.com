const width=400,height=400;functionPlot({target:"#plot1",width:400,height:400,yAxis:{domain:[-2,6]},xAxis:{domain:[-2,6]},grid:!1,data:[{fn:"-x+4"},{points:[[0,4]],fnType:"points",graphType:"scatter"}],annotations:[{x:0,text:"x = 0"}]}),functionPlot({target:"#plot2",width:400,height:400,yAxis:{domain:[-1,7]},xAxis:{domain:[-2,6]},grid:!1,data:[{fn:"x^2-4x+4"},{points:[[0,4]],fnType:"points",graphType:"scatter"}],annotations:[{x:0,text:"x = 0"}]});const plot3Options={target:"#plot3",width:400,height:400,yAxis:{domain:[-1,7]},xAxis:{domain:[-2,6]},grid:!1,data:[{fn:"x^2-4x+4"},{points:[[2,0],[4,4]],fnType:"points",graphType:"scatter"}],annotations:[{x:0,text:"x = 0"}]},round=e=>Math.round(100*e)/100,sliderLabel=document.getElementById("sliderLabel");functionPlot(plot3Options);const updateGraph=e=>{const t=e.target.value,n=-6*t+2,r=8*t-4;sliderLabel.innerHTML=`${t<0?"- "+-round(t):round(t)} x^2 ${n<0?"- "+-round(n):"+ "+round(n)} x ${r<0?"- "+-round(r):"+ "+round(r)}`,plot3Options.data[0].fn=`(${t})x^2+(${n})x+(${r})`,functionPlot(plot3Options)};document.getElementById("slider").oninput=updateGraph;const onlyDigits=e=>/^\d+$/.test(e);window.onlyDigits=onlyDigits;const generateShares1=e=>{const t=document.getElementById("input1");if(!onlyDigits(t.value))return void alert("Secret should only include digits.");const n=document.getElementById("output1");n.value="";let r=1;for(const e of t.value)n.value+=`${e}${r}\n`,r++};window.generateShares1=generateShares1;const recoverSecret1=e=>{const t=document.getElementById("input1"),n=document.getElementById("output1");t.value="";const r=n.value.split("\n"),o=new Map;for(let e of r)if(e=e.trim(),""!==e){if(!onlyDigits(e))return void alert("Shares should only include digits.");try{const t=Number.parseInt(e.substring(1));o.set(t,e.charAt(0))}catch{return void alert("Invalid share.")}}for(let e=1;e<o.size+1;e++){if(!o.has(e))return void alert("Invalid share.");t.value+=o.get(e)}};window.recoverSecret1=recoverSecret1;const generateShares2=e=>{let t=document.getElementById("input2");if(!onlyDigits(t.value))return void alert("Secret should only include digits.");const n=t.value.length,r=t.value;let o=document.getElementById("num2");if(!onlyDigits(o.value))return void alert("Number of shares must be a whole number.");const i=parseInt(o.value);if(i<2)return void alert("Number of shares must be at least 2.");const a=document.getElementById("output2");a.value="";const s=[];for(let e=0;e<i-1;e++)s.push(`${Math.floor(Math.random()*10**n)}`.padStart(n,"0"));addition=(e,t)=>{let n="",r=1;for(;r<=e.length;){n=`${(parseInt(e.charAt(e.length-r))+parseInt(t.charAt(t.length-r)))%10}`+n,r++}return n};let l=r;for(const e of s)l=addition(l,e);a.value+=`${l}\n`;for(const e of s)a.value+=`${e}\n`};window.generateShares2=generateShares2;const recoverSecret2=e=>{const t=document.getElementById("input2"),n=document.getElementById("output2");t.value="",subtraction=(e,t)=>{let n="",r=1;for(;r<=e.length;){n=`${(parseInt(e.charAt(e.length-r))-parseInt(t.charAt(t.length-r))+10)%10}`+n,r++}return n};const r=n.value.split("\n");let o=r.shift();for(let e of r)if(e=e.trim(),""!==e){if(!onlyDigits(e))return void alert("Shares should only include digits.");o=subtraction(o,e)}t.value=o};window.recoverSecret2=recoverSecret2;const PRIME=2n**127n-1n,generateRandomBigInt=(e,t)=>{if(e>=t)throw"lowBigInt must be smaller than highBigInt.";const n=t-e,r=n.toString().length;let o="";for(;o.length<r;)o+=Math.random().toString().split(".")[1];o=o.slice(0,r);const i="1"+"0".repeat(r);return e+n*BigInt(o)/BigInt(i)},bigIntfloorDivide=(e,t)=>{if(0n===t)throw"Divide by zero.";if(0n===e)return 0n;if(e>0n&&t>0n||e<0n&&t<0n)return e/t;const n=e/t;return 0n===e%t?n:n-1n},evalAt=(e,t,n)=>{let r=0n;for(let o=e.length-1;o>=0;o--)r*=t,r+=e[o],r%=n;return r},makeRandomShares=(e,t,n,r=PRIME)=>{if(t>n)throw"Pool secret would be irrecoverable.";const o=[BigInt(e)].concat([...Array(t-1).keys()].map((e=>generateRandomBigInt(0n,PRIME-1n))));return[...Array(n).keys()].map((e=>[BigInt(e+1),evalAt(o,BigInt(e+1),r)]))},extendedGCD=(e,t)=>{let n=0n,r=1n,o=1n,i=0n;for(;0n!==t;){const a=bigIntfloorDivide(e,t);[e,t]=[t,(e+t)%t],[n,r]=[r-a*n,n],[o,i]=[i-a*o,o]}return[r,i]},divMod=(e,t,n)=>e*extendedGCD(t,n)[0],lagrangeInterpolate=(e,t,n,r)=>{const o=t.length,i=e=>{let t=1n;for(const n of e)t*=n;return t},a=[],s=[];for(let n=0;n<o;n++){const r=t.slice(),o=BigInt(r.splice(n,1));a.push(i(r.map((t=>e-t)))),s.push(i(r.map((e=>o-e))))}const l=i(s),u=[...Array(o).keys()].map((e=>divMod(a[e]*l*n[e]%r,s[e],r))).reduce(((e,t)=>e+t),0n);let d=divMod(u,l,r);return d>0n?d%r:(d+(-1n*d/r+1n)*r)%r},recoverSecret=(e,t=PRIME)=>{if(e.length<2)throw"Need at least 2 shares";const n=[],r=[];for(const t of e)n.push(t[0]),r.push(t[1]);return lagrangeInterpolate(0n,n,r,t)},generateShares3=e=>{const t=document.getElementById("input3");if(!onlyDigits(t.value))return void alert("Secret should only include digits.");const n=parseInt(t.value);let r=document.getElementById("num3");if(!onlyDigits(r.value))return void alert("Number of shares must be a whole number.");const o=parseInt(r.value);if(o<2)return void alert("Number of shares must be at least 2.");let i=document.getElementById("min3");if(!onlyDigits(i.value))return void alert("Minimum number of shares must be a whole number.");const a=parseInt(i.value);if(a<2)return void alert("Minimum number of shares must be at least 2.");if(a>o)return void alert("Minimum number of shares cannot be bigger than the number of shares.");const s=document.getElementById("output3");s.value="";const l=makeRandomShares(n,a,o);for(const e of l)s.value+=`${e[0]} ${e[1]}\n`};window.generateShares3=generateShares3;const recoverSecret3=e=>{const t=document.getElementById("input3"),n=document.getElementById("output3");t.value="";const r=[],o=n.value.split("\n");for(let e of o){if(e=e.trim(),""===e)continue;const[t,n]=e.split(" ");if(!onlyDigits(t)||!onlyDigits(n))return void alert("Shares should only have digit points.");r.push([BigInt(t),BigInt(n)])}const i=recoverSecret(r);t.value=`${i}`};window.recoverSecret3=recoverSecret3;